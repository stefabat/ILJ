# Improved Lennard Jones kernel
# the energy unit of ϵ decideds the output unit of this expression
function ILJ_kernel(ϵ, rm, β, m)
    if ϵ == 0
        return r -> 0.0
    end
    n(r) = β + 4.0*(r/rm)^2
    return r -> ϵ * ( m/(n(r)-m)*(rm/r)^n(r) - n(r)/(n(r)-m)*(rm/r)^m )
end

# Induction kernel kernel, induction generated by three charges
# formula comes from standard derivation [Kaplan, Stone, or Pirani]
# α is supposed to be in Ang^3, charges in au units & distances in Ang
# in the expression everything is transformed in au
# output is in au
function N3m_induction_kernel(α, q1, q2, q3)
    return (ri1, ri2, ri3) -> -0.5 * α/tobohr * ( q1/(ri1^2) + q2/(ri2^2) + q3/(ri3^2) )^2
end

# Couloumb electrostatic kernel
# charges assumed to be in au, distances in Ang
# in the expression everything is transformed in au
# output is au
function electrostatic_kernel()
    return (q1, q2, r_ij) -> (q1 * q2 / r_ij)/tobohr
 end

function Rm(α1_eff,α2_eff)
    return 1.767 * (α1_eff^(1/3) + α2_eff^(1/3))/(α1_eff*α2_eff)^0.095
end

function C6eff(α1,N1_eff,α2,N2_eff)
    return 15700 * α1 * α2 / (sqrt(α1/N1_eff) + sqrt(α2/N2_eff))
end

function epsilon(R,C6)
    return 0.720 * C6/R^6
end

